{"version":3,"sources":["constants.js","glue.js","ClientDetails.jsx","StocksTable.jsx","ChannelSelectorWidget.jsx","Stocks.jsx","index.js","serviceWorker.js"],"names":["REQUEST_OPTIONS","headers","accept","PRICE_RISING","color","width","height","viewBox","class","fill","xmlns","fill-rule","d","PRICE_FALLING","getChannelNamesAndColors","glue","a","channels","list","channelContexts","channelNamesAndColors","map","channelContext","name","meta","joinChannel","channelName","value","my","leave","join","ClientDetails","client","firstName","lastName","clientFullName","portfolioValue","currentPrice","lastPrices","length","StocksTable","stocks","id","className","symbol","lastClosePrice","key","isPriceRising","toUpperCase","toFixed","percentageChange","dot","alignItems","display","backgroundColor","borderRadius","content","marginRight","colourStyles","container","styles","control","option","data","isDisabled","isFocused","isSelected","chroma","alpha","css","contrast","cursor","input","placeholder","singleValue","ChannelSelectorWidget","onChannelSelected","onDefaultChannelSelected","defaultChannel","label","options","defaultValue","onChange","target","isSearchable","Stocks","handler","useState","setStocks","clientId","setClient","useGlue","state","subscribe","useEffect","fetch","response","json","clients","selectedClient","find","fetchClient","portfolio","fetchStocks","useMemo","clientPortfolio","filter","some","stockId","glueSettings","web","factory","GlueWeb","config","desktop","GlueDesktop","ReactDOM","render","settings","glueFactory","document","getElementById","navigator","URL","process","window","location","href","origin","addEventListener","swUrl","serviceWorker","register","scope","start_url","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","registerValidSW"],"mappings":"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","file":"static/js/main.fe0d5ebc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// The value that will be displayed as an option in the channel selector widget when the application has not joined a channel yet.\r\n// The user can select this option from the UI to make the application leave the current channel.\r\nexport const NO_CHANNEL_VALUE = 'No channel';\r\n\r\nexport const REQUEST_OPTIONS = {\r\n    headers: { accept: 'application/json' }\r\n};\r\n\r\nexport const CLIENTS_DATA_URL = '/api/clients/'\r\n\r\nexport const STOCKS_DATA_URL = '/api/stocks/'\r\n\r\nexport const PRICE_RISING = <svg color=\"green\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-arrow-up-circle-fill\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path fill-rule=\"evenodd\" d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-7.5 3.5a.5.5 0 0 1-1 0V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V11.5z\" />\r\n</svg>\r\n\r\nexport const PRICE_FALLING = <svg color=\"red\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-arrow-down-circle-fill\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path fill-rule=\"evenodd\" d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4.5a.5.5 0 0 0-1 0v5.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V4.5z\" />\r\n</svg>\r\n","import { NO_CHANNEL_VALUE } from './constants';\r\n\r\n// Get the channel names and colors using the Channels API.\r\nexport const getChannelNamesAndColors = async glue => {\r\n    const channelContexts = await glue.channels.list();\r\n    const channelNamesAndColors = channelContexts.map(channelContext => ({\r\n        name: channelContext.name,\r\n        color: channelContext.meta.color\r\n    }));\r\n    return channelNamesAndColors;\r\n};\r\n\r\n// Join the given channel (or leave the current channel if NO_CHANNEL_VALUE is selected).\r\nexport const joinChannel = glue => ({ value: channelName }) => {\r\n    if (channelName === NO_CHANNEL_VALUE) {\r\n        if (glue.channels.my()) {\r\n            glue.channels.leave();\r\n        }\r\n    } else {\r\n        glue.channels.join(channelName);\r\n    }\r\n};\r\n\r\n// Subscribe for the current channel with the provided callback.\r\nexport const subscribeForChannels = handler => glue => {\r\n    glue.channels.subscribe(handler);\r\n};\r\n","import React from 'react';\r\n\r\nconst clientFullName = ({ firstName, lastName } = {}) => `${firstName} ${lastName}`;\r\n\r\nfunction ClientDetails({ client }) {\r\n    return <div class=\"card\">\r\n        <div class=\"card-body d-flex justify-content-between\">\r\n            <h5 class=\"card-title\">{client != null ? clientFullName(client) : null}</h5>\r\n            <p class=\"card-text\">Portfolio Value: ${client?.portfolioValue}</p>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ClientDetails;","import React from 'react';\r\nimport { PRICE_RISING, PRICE_FALLING } from './constants';\r\n\r\nexport const currentPrice = (lastPrices) => lastPrices[lastPrices.length - 1];\r\n\r\nexport const isPriceRising = ({ lastPrices, lastClosePrice }) => currentPrice(lastPrices) >= lastClosePrice;\r\n\r\nexport const percentageChange = ({ lastPrices, lastClosePrice }) => ((currentPrice(lastPrices) - lastClosePrice) / lastClosePrice * 100).toFixed(2)\r\n\r\nfunction StocksTable({ stocks }) {\r\n    return <table id=\"portfolioTable\" className=\"table table-hover\">\r\n        <thead>\r\n            <tr>\r\n                <th></th>\r\n                <th>Symbol</th>\r\n                <th>Name</th>\r\n                <th className=\"text-right\">Percentage Change</th>\r\n                <th className=\"text-right\">Current Price</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {stocks.map(({ id, name, symbol, lastClosePrice, lastPrices }) => (\r\n                <tr key={id}>\r\n                    <td>{\r\n                        isPriceRising({ lastClosePrice, lastPrices }) ? PRICE_RISING : PRICE_FALLING\r\n                    }</td>\r\n                    <td>{symbol && symbol.toUpperCase()}</td>\r\n                    <td>{name && name.toUpperCase()}</td>\r\n                    <td className=\"text-right\">{percentageChange({ lastPrices, lastClosePrice })} %</td>\r\n                    <td className=\"text-right\">$ {currentPrice(lastPrices)}</td>\r\n                </tr>\r\n            ))}\r\n        </tbody>\r\n    </table>\r\n}\r\n\r\nexport default StocksTable;","import React from 'react';\r\nimport chroma from 'chroma-js';\r\nimport Select from 'react-select';\r\n\r\n// The value that will be displayed inside the channel selector widget to leave the current channel.\r\nimport { NO_CHANNEL_VALUE } from './constants';\r\n\r\n// The CSS for the color dot that will appear next to each item inside the channel selector widget menu.\r\nconst dot = (color = '#ccc') => ({\r\n    alignItems: 'center',\r\n    display: 'flex',\r\n\r\n    ':before': {\r\n        backgroundColor: color,\r\n        borderRadius: 10,\r\n        content: '\" \"',\r\n        display: 'block',\r\n        marginRight: 8,\r\n        height: 10,\r\n        width: 10\r\n    }\r\n});\r\n\r\n// The CSS for the different UI components of the channel selector widget.\r\nconst colourStyles = {\r\n    container: styles => ({ ...styles, width: '148px' }),\r\n    control: styles => ({ ...styles, backgroundColor: 'white' }),\r\n    option: (styles, { data, isDisabled, isFocused, isSelected }) => {\r\n        const color = chroma(data.color || '#E4E5E9');\r\n        return {\r\n            ...styles,\r\n            backgroundColor: isDisabled\r\n                ? null\r\n                : isSelected\r\n                    ? data.color\r\n                    : isFocused\r\n                        ? color.alpha(0.1).css()\r\n                        : null,\r\n            color: isDisabled\r\n                ? '#ccc'\r\n                : isSelected\r\n                    ? chroma.contrast(color, 'white') > 2\r\n                        ? 'white'\r\n                        : 'black'\r\n                    : data.color,\r\n            cursor: isDisabled ? 'not-allowed' : 'default',\r\n            width: '148px',\r\n            ':active': {\r\n                ...styles[':active'],\r\n                backgroundColor: !isDisabled && (isSelected ? data.color : color.alpha(0.3).css()),\r\n            },\r\n        };\r\n    },\r\n    input: styles => ({ ...styles, ...dot() }),\r\n    placeholder: styles => ({ ...styles, ...dot() }),\r\n    singleValue: (styles, { data }) => ({ ...styles, ...dot(data.color) })\r\n};\r\n\r\nfunction ChannelSelectorWidget({ channelNamesAndColors = [], onChannelSelected = () => { }, onDefaultChannelSelected = () => { } }) {\r\n    // The default channel that will always be part of the channel selector widget.\r\n    const defaultChannel = {\r\n        value: NO_CHANNEL_VALUE,\r\n        label: NO_CHANNEL_VALUE\r\n    };\r\n    const options = [\r\n        defaultChannel,\r\n        ...channelNamesAndColors.map(({ name, color }) => ({\r\n            value: name,\r\n            label: name,\r\n            color\r\n        }))\r\n    ];\r\n\r\n    const onChange = target => {\r\n        if (target.value === NO_CHANNEL_VALUE) {\r\n            onDefaultChannelSelected(target);\r\n        }\r\n        else {\r\n            onChannelSelected(target);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Select\r\n            defaultValue={defaultChannel}\r\n            options={options}\r\n            styles={colourStyles}\r\n            onChange={onChange}\r\n            isSearchable={false}\r\n        />\r\n    );\r\n}\r\n\r\nexport default ChannelSelectorWidget;\r\n","import React, { useEffect, useState, useMemo } from 'react';\r\nimport { useGlue } from '@glue42/react-hooks';\r\n\r\nimport { REQUEST_OPTIONS, CLIENTS_DATA_URL, STOCKS_DATA_URL } from './constants';\r\nimport { getChannelNamesAndColors, joinChannel, subscribeForChannels } from './glue';\r\nimport ClientDetails from './ClientDetails';\r\nimport StocksTable from './StocksTable';\r\nimport ChannelSelectorWidget from \"./ChannelSelectorWidget\"\r\n\r\nfunction Stocks() {\r\n    const [stocks, setStocks] = useState([]);\r\n    const [{ clientId, client }, setClient] = useState({});\r\n    const setDefaultClient = () => setClient({ clientId: \"\" });\r\n\r\n    const selectClientHandler = ({ clientId }) => {\r\n        setClient((state) => ({ ...state, clientId }));\r\n    }\r\n    useGlue(subscribeForChannels(selectClientHandler));\r\n\r\n    // Fetch clients.\r\n    useEffect(() => {\r\n        const fetchClient = async () => {\r\n            const response = await fetch(CLIENTS_DATA_URL, REQUEST_OPTIONS);\r\n            const clients = await response.json();\r\n\r\n            const selectedClient = clients.find(({ id }) => id === clientId);\r\n            setClient((state) => ({\r\n                ...state,\r\n                client: selectedClient\r\n            }))\r\n        }\r\n        fetchClient()\r\n    }, [clientId]);\r\n\r\n    // Fetch stocks.\r\n    useEffect(() => {\r\n        const fetchStocks = async () => {\r\n            const response = await fetch(STOCKS_DATA_URL, REQUEST_OPTIONS);\r\n            const portfolio = await response.json();\r\n            setStocks(portfolio);\r\n        };\r\n        fetchStocks();\r\n    }, []);\r\n\r\n    const portfolio = useMemo(() => {\r\n        if (!client) {\r\n            return stocks\r\n        }\r\n\r\n        const clientPortfolio = client?.portfolio || [];\r\n        return stocks.filter(({ id }) => {\r\n            return clientPortfolio.some(({ stockId }) => stockId === id)\r\n        });\r\n    }, [client, stocks])\r\n\r\n    // Get the channel names and colors and pass them as props to the ChannelSelectorWidget component.\r\n    const channelNamesAndColors = useGlue(getChannelNamesAndColors);\r\n    // The callback that will join the newly selected channel. Pass it as props to the ChannelSelectorWidget component to be called whenever a channel is selected.\r\n    const onChannelSelected = useGlue(joinChannel);\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"d-flex justify-content-between\">\r\n                <h1 id=\"title\" className=\"text-center\">Portfolio</h1>\r\n                <ChannelSelectorWidget\r\n                    key={true}\r\n                    channelNamesAndColors={channelNamesAndColors}\r\n                    onChannelSelected={onChannelSelected}\r\n                    onDefaultChannelSelected={setDefaultClient}\r\n                />\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    {client ? <ClientDetails client={client} /> : null}\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <StocksTable stocks={portfolio} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Stocks;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GlueWeb from \"@glue42/web\";\r\nimport GlueDesktop from \"@glue42/desktop\";\r\nimport { GlueProvider } from '@glue42/react-hooks';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\nimport Stocks from './Stocks';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst glueSettings = {\r\n    web: {\r\n        factory: GlueWeb,\r\n        config: {\r\n            channels: 'full'\r\n        }\r\n    },\r\n    desktop: {\r\n        factory: GlueDesktop,\r\n        config: {\r\n            channels: 'full'\r\n        }\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <GlueProvider settings={glueSettings} glueFactory={GlueWeb}>\r\n        <Stocks />\r\n    </GlueProvider>,\r\n    document.getElementById('root')\r\n);\r\n\r\nserviceWorker.register();\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nexport function register(config) {\r\n    if ('serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\r\n            registerValidSW(swUrl, config);\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl, {\r\n            scope: '/stocks/',\r\n            start_url: '/stocks/'\r\n        })\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\n// eslint-disable-next-line\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n"],"sourceRoot":""}